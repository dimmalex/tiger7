
# Ubuntu compile tools install
ubuntu_preset:
	sudo apt-get update
	sudo apt-get install vim git subversion pandoc aptitude
	sudo apt-get install gcc g++ binutils patch bzip2 flex bison make autoconf gettext texinfo unzip sharutils gawk python libtool shtool curl lrzsz zlib1g-dev automake automake1.11
	sudo apt-get install lib32z1 libssl-dev device-tree-compiler libevent-dev
	-sudo apt-get install lib32ncurses5
	-sudo apt-get install libncurses5-dev
	-sudo apt-get install libncursesw5-dev
	# Disable Check the SSL certificate of the server
	git config --global http.sslVerify false

# Model switch
pid:
	@echo '\ngBOARDID=${gBOARDID}' >> gBOARDID
	@echo "Switch the Board Identify to ${gBOARDID}"

# SDK Download
update:
	# Update the tiger7 SDK
	@git pull
	# Update the Platform-specific configure repositories
	if [ -d ${gPLATFORM_DIR} ]; then \
		echo "cd ${gPLATFORM_DIR}; git pull"; \
	else \
		echo "cd ${gTOP_DIR}/config; git clone git@gitee.com:ashyelf/${gPLATFORM}"; \
	fi
	# Platform-specific SDK Makefile update
	make -f ${gSDK_MAKEFILE} $@
	# Adjust the Platform-specific SDK
	make adjust
	# Refresh the menu
	make menu

# Adjust the Platform-specific SDK
adjust:
	if [ -d ${gSDK_DIR} ]; then \
		make -f ${gSDK_MAKEFILE} -C ${gSDK_DIR} $@; \
	else \
		make -f ${gSDK_MAKEFILE} -C ${gPLATFORM_DIR} $@; \
	fi

# SDK clear
bufclean sdkclean:
	if [ -d ${gSDK_DIR} ]; then \
		make -f ${gSDK_MAKEFILE} -C ${gSDK_DIR} $@; \
	else \
		make -f ${gSDK_MAKEFILE} -C ${gPLATFORM_DIR} $@; \
	fi

.PHONY: ubuntu_preset pid update adjust bufclean sdkclean



#####################################
######## Misc Target ################
#####################################

sz:
	make -f ${gSDK_MAKEFILE} -C ${gPLATFORM_DIR} $@
tar: boot
	make -f ${gSDK_MAKEFILE} -C ${gPLATFORM_DIR} $@
ftp:
	make -f ${gSDK_MAKEFILE} -C ${gPLATFORM_DIR} $@
.PHONY: sz tar ftp

arch:
	if [ ! -d ${gTOP_DIR}/config/${gSDK_OPEN}/arch ] && [ -d ${gTOP_DIR}/config/${gSDK_OPEN}/${gHARDWARE}/${gCUSTOM} ]; then \
		cp ${gBUILD_DIR}/*.fpk ${gTOP_DIR}/config/${gSDK_OPEN}/${gHARDWARE}/${gCUSTOM}; \
	fi
repo: arch
	cp ${gSTORE_DIR}/*.fpk ${gSTORE_DIR}/${gHARDWARE}_${gCUSTOM}_${gSCOPE}.store ${gREPO_DIR}
	-cp ${gREPO_DIR}/land-*.fpk ${gREPO_DIR}/network-*.fpk ${gREPO_DIR}/modem-*.fpk ${gREPO_DIR}/client-*.fpk ${gREPO_DIR}/forward-*.fpk ${gREPO_DIR}/uart-*.fpk ${gREPO_DIR}/wui-*.fpk ${gTOP_DIR}/config/${gPLATFORM}/${gHARDWARE}
	if [ ! -d ${gTOP_DIR}/config/${gSDK_OPEN}/${gHARDWARE} ]; then \
		return; \
	fi
	-mv ${gREPO_DIR}/land-*.fpk ${gREPO_DIR}/network-*.fpk ${gREPO_DIR}/modem-*.fpk ${gREPO_DIR}/agent-*.fpk ${gREPO_DIR}/gather-*.fpk ${gREPO_DIR}/client-*.fpk ${gREPO_DIR}/forward-*.fpk ${gREPO_DIR}/uart-*.fpk ${gREPO_DIR}/wui-*.fpk ${gTOP_DIR}/config/${gSDK_OPEN}/${gHARDWARE}
	-mv ${gREPO_DIR}/pdriver-*.fpk ${gTOP_DIR}/config/${gSDK_OPEN}/${gHARDWARE}
.PHONY: arch repo

install_local local_run:
	make -f ${gSDK_MAKEFILE} -C ${gPLATFORM_DIR} $@
.PHONY: install_local local_run

# test
print:
	@echo ${gBOARDID}
	@echo ${gHARDWARE}
	@echo ${gCUSTOM}
	@echo ${gSCOPE}
	@echo ${gPUBLISH}
	@echo ${REPO_LIST}
	@echo "make kernel OBJ=package/network/compile"
.PHONY: test

